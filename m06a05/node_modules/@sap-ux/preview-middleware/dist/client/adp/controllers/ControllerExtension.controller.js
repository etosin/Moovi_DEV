"use strict";

sap.ui.define(["sap/m/MessageToast", "sap/ui/core/library", "sap/ui/model/json/JSONModel", "sap/ui/fl/Utils", "../api-handler", "./BaseDialog.controller"], function (MessageToast, sap_ui_core_library, JSONModel, Utils, ___api_handler, __BaseDialog) {
  "use strict";

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule && typeof obj.default !== "undefined" ? obj.default : obj;
  }
  /** sap.ui.core */
  const ValueState = sap_ui_core_library["ValueState"];
  /** sap.ui.base */
  const getManifestAppdescr = ___api_handler["getManifestAppdescr"];
  const readControllers = ___api_handler["readControllers"];
  const writeChange = ___api_handler["writeChange"];
  const writeController = ___api_handler["writeController"];
  const BaseDialog = _interopRequireDefault(__BaseDialog);
  /**
   * @namespace open.ux.preview.client.adp.controllers
   */
  const ControllerExtension = BaseDialog.extend("open.ux.preview.client.adp.controllers.ControllerExtension", {
    constructor: function _constructor(name, overlays, rta) {
      BaseDialog.prototype.constructor.call(this, name);
      this.rta = rta;
      this.overlays = overlays;
      this.model = new JSONModel();
    },
    onInit: async function _onInit() {
      this.dialog = this.byId('controllerExtensionDialog');
      await this.buildDialogData();
      this.getView()?.setModel(this.model);
      this.dialog.open();
    },
    onControllerNameInputChange: function _onControllerNameInputChange(event) {
      const source = event.getSource();
      const controllerName = source.getValue().trim();
      const controllerList = this.model.getProperty('/controllersList');
      if (controllerName.length <= 0) {
        this.dialog.getBeginButton().setEnabled(false);
        source.setValueState(ValueState.None);
        this.model.setProperty('/newControllerName', null);
      } else {
        const fileExists = controllerList.find(f => {
          return f.controllerName === `${controllerName}.js`;
        });
        const isValidName = /^[a-zA-Z_][a-zA-Z0-9_-]*$/.test(controllerName);
        if (fileExists) {
          source.setValueState(ValueState.Error);
          source.setValueStateText('Enter a different name. The controller name that you entered already exists in your project.');
          this.dialog.getBeginButton().setEnabled(false);
        } else if (!isValidName) {
          source.setValueState(ValueState.Error);
          source.setValueStateText('The controller name cannot contain white spaces or special characters.');
          this.dialog.getBeginButton().setEnabled(false);
        } else {
          this.dialog.getBeginButton().setEnabled(true);
          source.setValueState(ValueState.None);
          this.model.setProperty('/newControllerName', controllerName);
        }
      }
    },
    onCreateBtnPress: async function _onCreateBtnPress(event) {
      const source = event.getSource();
      source.setEnabled(false);
      const controllerName = this.model.getProperty('/newControllerName');
      const viewId = this.model.getProperty('/viewId');
      await this.createNewController(controllerName, viewId);
      this.handleDialogClose();
    },
    buildDialogData: async function _buildDialogData() {
      const selectorId = this.overlays.getId();
      const overlayControl = sap.ui.getCore().byId(selectorId);
      const control = overlayControl.getElement();
      const viewId = Utils.getViewForControl(control).getId();
      this.model.setProperty('/viewId', viewId);
      await this.getControllers();
    },
    getControllers: async function _getControllers() {
      try {
        const {
          controllers
        } = await readControllers();
        this.model.setProperty('/controllersList', controllers);
      } catch (e) {
        MessageToast.show(e.message);
        throw new Error(e.message);
      }
    },
    createNewController: async function _createNewController(controllerName, viewId) {
      try {
        const manifest = await getManifestAppdescr();
        await writeController({
          controllerName,
          projectId: manifest.id
        });
        const controllerRef = {
          codeRef: `coding/${controllerName}.js`,
          viewId
        };
        const service = await this.rta.getService('controllerExtension');
        const change = await service.add(controllerRef.codeRef, controllerRef.viewId);
        await writeChange(change);
        MessageToast.show(`Controller extension with name '${controllerName}' was created.`);
      } catch (e) {
        // We want to update the model incase we have already created a controller file but failed when creating a change file,
        // so when the user types the same controller name again he does not get 409 from the server, instead an error is shown in the UI
        await this.getControllers();
        MessageToast.show(e.message);
        throw new Error(e.message);
      }
    }
  });
  return ControllerExtension;
});
//# sourceMappingURL=ControllerExtension.controller.js.map