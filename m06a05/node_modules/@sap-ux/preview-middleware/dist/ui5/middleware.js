"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = require("@sap-ux/logger");
const flp_1 = require("../base/flp");
const adp_tooling_1 = require("@sap-ux/adp-tooling");
/**
 * Initialize the preview for an adaptation project.
 *
 * @param rootProject reference to the project
 * @param config configuration from the ui5.yaml
 * @param flp FlpSandbox instance
 * @param util middleware utilities provided by the UI5 CLI
 * @param logger logger instance
 */
function initAdp(rootProject, config, flp, util, logger) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const appVariant = yield rootProject.byPath('/manifest.appdescr_variant');
        if (appVariant) {
            const adp = new adp_tooling_1.AdpPreview(config, rootProject, util, logger);
            const variant = JSON.parse(yield appVariant.getString());
            const layer = yield adp.init(variant);
            if (flp.rta) {
                flp.rta.layer = layer;
                flp.rta.options = {
                    projectId: variant.id,
                    scenario: 'ADAPTATION_PROJECT'
                };
                for (const editor of flp.rta.editors) {
                    (_a = editor.pluginScript) !== null && _a !== void 0 ? _a : (editor.pluginScript = 'open/ux/preview/client/adp/init');
                }
            }
            yield flp.init(adp.descriptor.manifest, adp.descriptor.name, adp.resources);
            flp.router.use(adp.descriptor.url, adp.proxy.bind(adp));
            adp.addApis(flp.router);
        }
        else {
            throw new Error('ADP configured but no manifest.appdescr_variant found.');
        }
    });
}
/**
 * The developer mode is only supported for adaptation projects, therefore, notify the user if it is wrongly configured and then disable it.
 *
 * @param config configurations from the ui5.yaml
 * @param logger logger instance
 */
function sanitizeConfig(config, logger) {
    if (config.rta && config.adp === undefined) {
        config.rta.editors = config.rta.editors.filter((editor) => {
            if (editor.developerMode) {
                logger.error('developerMode is ONLY supported for SAP UI5 adaptation projects.');
                logger.warn(`developerMode for ${editor.path} disabled`);
            }
            return !editor.developerMode;
        });
    }
}
/**
 * Create the router that is to be exposed as UI5 middleware.
 *
 * @param param0 parameters provider by UI5
 * @param param0.resources reference to resources
 * @param param0.options options and configurations from the ui5.yaml
 * @param param0.middlewareUtil additional UI5 CLI utilities
 * @param logger logger instance
 * @returns a router
 */
function createRouter({ resources, options, middlewareUtil }, logger) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        // setting defaults
        const config = (_a = options.configuration) !== null && _a !== void 0 ? _a : {};
        (_b = config.flp) !== null && _b !== void 0 ? _b : (config.flp = {});
        sanitizeConfig(config, logger);
        // configure the FLP sandbox based on information from the manifest
        const flp = new flp_1.FlpSandbox(config, resources.rootProject, middlewareUtil, logger);
        if (config.adp) {
            yield initAdp(resources.rootProject, config.adp, flp, middlewareUtil, logger);
        }
        else {
            const manifest = yield resources.rootProject.byPath('/manifest.json');
            if (manifest) {
                yield flp.init(JSON.parse(yield manifest.getString()));
            }
            else {
                throw new Error('No manifest.json found.');
            }
        }
        // add exposed endpoints for cds-plugin-ui5
        flp.router.getAppPages = () => [`${flp.config.path}#${flp.config.intent.object}-${flp.config.intent.action}`];
        return flp.router;
    });
}
/**
 * Exporting the middleware for usage in the UI5 tooling.
 *
 * @param params middleware configuration
 * @returns a promise for the request handler
 */
module.exports = (params) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    const logger = new logger_1.ToolsLogger({
        transports: [new logger_1.UI5ToolingTransport({ moduleName: 'preview-middleware' })],
        logLevel: ((_a = params.options.configuration) === null || _a === void 0 ? void 0 : _a.debug) ? logger_1.LogLevel.Debug : logger_1.LogLevel.Info
    });
    try {
        return yield createRouter(params, logger);
    }
    catch (error) {
        logger.error('Could not start preview-middleware.');
        logger.error(error.message);
        throw error;
    }
});
//# sourceMappingURL=middleware.js.map